# 0-add_integer.txt

===================================
Instructions for Using 0-add_integer.py
===================================

This script defines a function for integer addition called ``add_integer(a, b=98)``.

## Usage

The function ``add_integer(...)`` returns the sum of its two arguments, similar to the ``+`` operator for numbers.

```python
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 3)
5


>>> add_integer(2, -3)
-1


>>> add_integer(2.0, 3.0)
5


>>> add_integer(2.9, 0.2)
2


>>> add_integer(2.3, -3)
-1


>>> add_integer(2)
100


Non-Numbers
==========-

The function expects both arguments to be integers or floats. If either argument is a non-integer and non-float, a TypeError is raised.

>>> add_integer("hello", 3)
TypeError: a must be an integer


>>> add_integer(2, "hello")
TypeError: b must be an integer


>>> add_integer(None)
TypeError: a must be an integer


>>> add_integer(2.3, None)
TypeError: b must be an integer


### If both arguments are non-integers and non-floats, a TypeError message is only printed for the first argument.

>>> add_integer("hello", "there")
TypeError: a must be an integer


### The function will fail if infinity is provided.

>>> add_integer(float('inf'))
OverflowError: cannot convert float infinity to integer


>>> add_integer(2, float('inf'))
OverflowError: cannot convert float infinity to integer


### Similarly, providing NaN numbers will result in an error.

>>> add_integer(float('nan'))
ValueError: cannot convert float NaN to integer


>>> add_integer(2, float('nan'))
ValueError: cannot convert float NaN to integer
